# Form implementation generated from reading ui file 'QT3DViewer_main_window.ui'
#
# Created by: PyQt6 UI code generator 6.2.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import itertools

import numpy as np
from PyQt6 import QtCore, QtWidgets
from PyQt6.QtCore import QDateTime, QTimer
from PyQt6.QtGui import QVector3D
from PyQt6.QtWidgets import QLabel
from pyqtgraph import opengl as gl


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(471, 640)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMaximumSize(QtCore.QSize(471, 640))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBoxShapes = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxShapes.setGeometry(QtCore.QRect(10, 10, 451, 51))
        self.groupBoxShapes.setFlat(False)
        self.groupBoxShapes.setObjectName("groupBoxShapes")
        self.layoutWidget = QtWidgets.QWidget(self.groupBoxShapes)
        self.layoutWidget.setGeometry(QtCore.QRect(90, 20, 281, 19))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayoutShapes = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayoutShapes.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayoutShapes.setObjectName("horizontalLayoutShapes")

        # Radio buttons setup
        self.radioButtonCube = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButtonCube.setObjectName("radioButtonCube")
        self.radioButtonCube.toggled.connect(lambda: self.radioButtonCube_checked())
        self.horizontalLayoutShapes.addWidget(self.radioButtonCube)

        self.radioButtonSphere = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButtonSphere.setObjectName("radioButtonSphere")
        self.radioButtonSphere.toggled.connect(lambda: self.radioButtonSphere_checked())
        self.horizontalLayoutShapes.addWidget(self.radioButtonSphere)

        self.radioButtonPyramid = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButtonPyramid.setObjectName("radioButtonPyramid")
        self.radioButtonPyramid.toggled.connect(lambda: self.radioButtonPyramid_checked())
        self.horizontalLayoutShapes.addWidget(self.radioButtonPyramid)

        # Main painting widget
        self.widget = gl.GLViewWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 70, 451, 531))
        self.widget.setObjectName("widget")
        MainWindow.setCentralWidget(self.centralwidget)

        # Build and setup Statusbar
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.lblInfoMessage = QLabel("")
        self.statusbar.addPermanentWidget(self.lblInfoMessage)
        self.spacer = QLabel("")
        self.statusbar.addPermanentWidget(self.spacer, 1)
        self.lblDate = QLabel("")
        self.statusbar.addPermanentWidget(self.lblDate)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.radioButtonCube.setChecked(True)

        # Setup timer to show current time
        self.timer = QTimer()
        self.timer.timeout.connect(self.showTime)
        self.timer.start(1000)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "QT3DViewer"))
        self.groupBoxShapes.setTitle(_translate("MainWindow", "Shape"))
        self.radioButtonCube.setText(_translate("MainWindow", "Cube"))
        self.radioButtonSphere.setText(_translate("MainWindow", "Sphere"))
        self.radioButtonPyramid.setText(_translate("MainWindow", "Pyramid"))

    def showTime(self):
        # Show current time in statusbar
        time = QDateTime.currentDateTime()
        timeDisplay = time.toString('yyyy-MM-dd hh:mm:ss dddd')
        self.lblDate.setText(timeDisplay)

    def cameraPosition(self):
        p = self.widget.cameraPosition()
        self.spacer.setText(f'x={p[0]:.3f} y={p[1]:.3f} z={p[2]:.3f}')

    def radioButtonCube_checked(self):
        if self.radioButtonCube.isChecked():
            self.widget.clear()
            self.lblInfoMessage.setText("Cube")
            self.paint_3d_axis()
            self.draw_cube()

    def radioButtonSphere_checked(self):
        if self.radioButtonSphere.isChecked():
            self.widget.clear()
            self.lblInfoMessage.setText("Sphere")
            self.paint_3d_axis()
            self.draw_sphere()

    def radioButtonPyramid_checked(self):
        if self.radioButtonPyramid.isChecked():
            self.widget.clear()
            self.lblInfoMessage.setText("Pyramid")
            self.paint_3d_axis()

    def paint_3d_axis(self):
        # draw grid surface
        xgrid = gl.GLGridItem()
        xgrid.setColor('#FF0000')
        xgrid.setSize(10, 10)
        xgrid.setSpacing(0.5, 0.5)
        self.widget.addItem(xgrid)

        # draw 3D axis
        axis = gl.GLAxisItem(size=QVector3D(4, 4, 4))
        self.widget.addItem(axis)

    def draw_cube(self):
        vertexes = np.array(list(itertools.product(range(2), repeat=3)))
        faces = []
        for i in range(2):
            temp = np.where(vertexes == i)
            for j in range(3):
                temp2 = temp[0][np.where(temp[1] == j)]
                for k in range(2):
                    faces.append([temp2[0], temp2[1 + k], temp2[3]])
        faces = np.array(faces)
        colors = np.array([[1, 0, 1, 1] for i in range(12)])
        cube = gl.GLMeshItem(vertexes=vertexes, faces=faces, faceColors=colors,
                             drawEdges=True, edgeColor=(0, 0, 0, 1))
        self.widget.addItem(cube)

    def draw_sphere(self):
        md = gl.MeshData.sphere(rows=20, cols=20, radius=1)
        m1 = gl.GLMeshItem(
            meshdata=md,
            smooth=True,
            color=(1, 1, 0, 1)
        )
        self.widget.addItem(m1)

    def draw_pyramid(self):
        pass
